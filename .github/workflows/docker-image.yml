name: Docker Build, Publish and Static Analysis

on:
  push:
    branches:
      - main

jobs:
  Clone:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Repo
        uses: actions/upload-artifact@v3
        with:
          name: repo
          path: ./

  Flake8:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: ./
      - name: Install dependencies
        run: pip3 install flake8

      - name: Run Flake8
        working-directory: ${{github.workspace}}/src
        run: flake8

  EditorConfigChecker:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .
      - name: Install dependencies
        run: npm install -g editorconfig-checker
      - name: Run Editorconfig Checker
        working-directory: ${{github.workspace}}/src
        run: editorconfig-checker

  MarkdownLint:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .
      - name: Install dependencies
        run: npm install -g markdownlint-cli
      - name: Run Markdown check
        run: markdownlint '**/*.md'

  UnitTests:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependecies
        run: |
          pip3 install -r ./src/requirements.txt

      - name: Run Python Unit tests
        run: python3 -m unittest ./tests/app_test.py

  GitLeaks:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  SnykTests:
    runs-on: ubuntu-latest
    needs: [ Clone ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .

      # Snyk Static analysis step
      - name: Snyk Code Analysis
        working-directory: ${{github.workspace}}/src
        run: |
          pip3 install -r requirements.txt
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_API_TOKEN }}
          snyk test
  SonarCloud:
    runs-on: ubuntu-latest
    needs: [ Clone, Flake8, EditorConfigChecker, MarkdownLint, UnitTests, GitLeaks, SnykTests ]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v3
        with:
          name: repo
          path: .

      # SonarCloud analysis step
      - name: SonarCloud Analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLUD_TOKEN }}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
  DockerBuild:
    runs-on: ubuntu-latest
    needs: [ SonarCloud ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mdp-c1:$COMMIT_SHA ./src
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          COMMIT_SHA: ${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vaskonti/mdp-c1:$COMMIT_SHA'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/mdp-c1:$COMMIT_SHA
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          COMMIT_SHA: ${{ github.sha }}
